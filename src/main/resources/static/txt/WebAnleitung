
   /* Kurze Anleitung Bote-Web */

    ALLGEMEINE EINSTELLUNGEN:

    COLOR:
      * windows-blau:   #2B8CC4;
      * Grau:           #858585
      * Red:            #FF0000
      * Green:          #00FF00
      * transparent:    #FFFFFF00
    1. Freunde Ausgabe untere Linie:
        messenger.html  Zeile: 139 <td style="border-bottom: 1px solid #E6E6E6;"></td>
    2. Freunde ausgabe: aktive background: messenger.js Zeile: 95 $(this).css({"background-color":"#CCEEFF"});
        + hover effect: css Zeile 214, div.freundeDaten:hover  { background-color: #E6F5FF; }
    3.









    ********************************** KURZE BESCHREIBUNG ****************************************

   ACHTUNG: Freunde & Message sind in einem messenger.html zusammen gefasst.
            Freunde: freunde aus dem Datenbank holen & in eine variable speicher "meineFreunde" in
            MessageController Zeile: 59
            Meine Freunde an die html Senden: MessageController Zeile: 62
                model.addAttribute("meinefreunde", meineFreunde);
            Freunde in html ausgeben: messenger.html Zeile: 69, eine tymeleaf schleife sieht so aus:
            <div id="FREUNDEDATEN" class="freundeDaten" data-th-each=" freunde : ${meinefreunde} "
                                 data-th-if="${freunde['role'].length == 0}">


   /* **************** Freunde Löschen ************************************ */
   wenn eine Freund wird aus dem Chat gelöscht werden alle Daten mit zugesendete 'messageToken' aus dem
   Datenbank/tabelle 'freunde' + 'messages' unwiderruflich gelöscht...
   Quelle: FreundeController/@PostMapping(value = "/freundedelete") Zeile: ab 300

   /* **************** ApiEinladenController (Freunde Einladen) ************** */

    1. @PostMapping(value = "alleUserApi")
         * Zugesendet von BoteFx/FreundeController/bekanntenEinladen Zeile: 320
         * der token wird nicht benutzt, als ballast zugesendet
         *
         * response: alle User in Datenbank finden und an BoteFX senden

    2.  @PostMapping(value = "/einladenApi")
         * zugesendet von BoteFX/einladenController/einladenRequest Zeile: ab 150
         * zugesendete parameter (3):
         * 1. sendeTelMail: eine E-Mail-Adresse oder Telefonnummer
         * 2. sendeKey: String 'mail' oder 'telefon', zu erkennen was ist zugesendet?
         * 3. Meiner Token(bei Bote: cookie)
       Zuerst wir geprüft ob die Mail oder Telefon schon als Freund gelistet sind,
       dann in Datenbank nach E-Mail oder Telefon suchen, wenn da ist untersuchen ob nicht
       eigenes ist, am schluss wird ins Tabelle Freund gespeichert...
       als response wir einen text zurückgesendet mit fehler oder ok
       an BoteFx/EinladenController Zeile: 185
       wird ausgewertet und Fehler angezeigt oder weiter geleitet

        // die Methode nue Freunde speichert mit ROLE eintrag
           private void neuerChatSave(Usern meinData, Usern freundData){
                // der role text
               String      werdeEingeladen     = "werdeeingeladen";
               String      wartenAufOk         = "wartenaufok";
           }
         die ROLE eintrag von 'werdeeingeladen' und 'warteaufok' wir benutzt in
         BoteFX/FreuneCellController Zeile 170, für die Freundschaft annehmen oder ablehnen


    /* *********** ApiMessage(Message Laden, Anzeigen, Löschen oder Bearbeiten) ************************* */


    /* ****************************** Textarea mit Enter Senden ************************* */

    1. messagecomponents.html Zeile: 120 Textarea
        a. <textarea id="MESSAGETEXT" rows="1" maxlength="5000"  data-th-onInput="autoRow(this)" ></textarea>
        b. <img class="itemCenter finger" src="/img/senden.png" width="30" id="send"
          th:onClick="sendeMessage([[${meinPseudonym}]], [[${freundToken}]], [[${meinToken}]], [[${freundMessageToken}]]);">

    2. messanger.js Zeile: 57 autoRow function
    3. messenger.js Zeile: ab 10, sind zuständig nur 2 functionen: window.addEventListener( "keydown",... + autoRow(this)

    4. Kurze beschreibung: bei anclicken auf einem Freund wird die neue Chat gestartet, die neue messages senden oder
        empfangen wird der messagecomponents.html aufgeruffen...  die textarea wird automatisch in focus gesetzt,
        bei jeder click auf die tastatur wird in textarea neuer text verfasst, die textarea automatisch mit dem text
        zu wachsen ist die function autoRow gedacht.... bei drücken auf Enter wird die message versendet, voraussetzing
        die textarea muss nicht Leer sein...
            a. wenn textarea leer ist und wir die Enter taste gedrückt dann kommt die function
                window.addEventListener(.... ins spiel: .... bei jeder Enter-press wird in textarea einen leerzeichen
                erzeugt, weil die textarea ist in focus, das bedeutet die textarea ist nicht leer und bei jeder nächsten
                enter-press wir die function autoRow abgeruffen und textarea wächst automatisch nach oben...
                das zu vermeiden ist in der function autoRow sperre eingesetzt (var autorow = false;), wen werden
                einfach wieder buchstaben eingetippt dan wird die variable autorow auf true gesetzt...
    5. die function: window.addEventListener( "keydown", (event) => {...
            a. zuerst wir die textarea ausgelesen.
            b. Enter taste wird gedrückt, textarea Leer...
                if (event.key === 'Enter' && valmsg.trim() == "")
                gleich wird die textarea auf leer geprüfft, erzeugte leerzeichen bei enter-druck
                wird mit den 'trim' ausgeschitten, wen beide passen, enter + leere textarea dann nichts machen
                und mit dem 'event.preventDefault();' weitere aktionen unterdrücken
            c.  Enter taste wird gedrückt, textarea nicht leer...
                der button in messagecomponents.html Zeile: 125
                <img class="itemCenter finger" src="/img/senden.png" width="30" id="send"
                th:onClick="sendeMessage([[${meinPseudonym}]], [[${freundToken}]], [[${meinToken}]], [[${freundMessageToken}]]);">
                wird in den if else (messengar.js) ausgelöst $("#send").click();
                schliesslich textarea geleert und weiter aktionen unterdrückt
            d.  buchstaben taste wird gedrückt, in else die autoRow function wird frei gesetzt und die
                textarea kan mit dem Text wachsen

    /* ************************ Ende message senden **************************************************** */